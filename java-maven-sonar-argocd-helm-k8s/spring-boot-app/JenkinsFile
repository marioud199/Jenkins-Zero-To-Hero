pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Setup GLIBC') {
      steps {
        sh '''
          apt-get update
          apt-get install -y wget
          wget -q -O /tmp/glibc-2.32.tar.gz https://ftp.gnu.org/gnu/libc/glibc-2.32.tar.gz
          tar -xzf /tmp/glibc-2.32.tar.gz -C /tmp
          cd /tmp/glibc-2.32
          mkdir build
          cd build
          ../configure --prefix=/usr/local/glibc-2.32
          make
          make install
          rm -rf /tmp/glibc-2.32*
          export LD_LIBRARY_PATH=/usr/local/glibc-2.32/lib:$LD_LIBRARY_PATH
        '''
      }
    }
   
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://172.17.0.1:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonar_id', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "marioud/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('dockerhub-id')
      }
      steps {
        script {
             sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} ."
           // sh "cd spring-boot-app && docker build -t ${DOCKER_IMAGE} ."
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "dockerhub-id") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
       // environment {
           // GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
         //   GIT_USER_NAME = "iam-veeramalla"
       // }
        steps {
            withCredentials([string(credentialsId: 'github-id', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "mohamedmarioud2020@gmail.com"
                    git config user.name "marioud199"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                    git remote set-url origin https://${USER}:${GITHUB_TOKEN}@github.com/marioud199/complete_CI-CD_jenkins_argo-cd-.git
                    git add .
                   // git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push origin HEAD:main
                    // git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
